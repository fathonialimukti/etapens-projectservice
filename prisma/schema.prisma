generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique(map: "user_username")
  email           String
  role            Role      @default(Guest)
  studentAccount  Student?
  lecturerAccount Lecturer?

  // @@unique([username, email])
  @@map("users")
}

enum Role {
  Admin
  Student
  Lecturer
  Guest
}

model Lecturer {
  id       Int       @id @default(autoincrement())
  name     String    @unique(map: "lecturer_name")
  image    String?
  nip      String    @unique()
  bio      String?
  project  Project[]
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isActive Boolean   @default(false) @db.Boolean

  @@map("lecturers")
}

model Student {
  id       Int       @id @default(autoincrement())
  name     String    @unique(map: "student_name")
  nrp      String    @unique
  image    String
  bio      String
  project  Project?
  backend  Backend?
  database Database?
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isActive Boolean   @default(false) @db.Boolean

  @@map("students")
}

model Project {
  id             Int              @id @default(autoincrement())
  title          String           @unique(map: "project_title")
  description    String           @db.Text
  documents      Json?
  images         String[]
  video          String?
  sourceCode     String?
  url            String?
  isActive       Boolean          @default(false)
  type           ProjectType      @default(Generals)
  runtimeVersion String?
  tech           TechList[]
  researchField  ResearchField[]
  method         ResearchMethod[]
  studentId      Int              @unique
  student        Student          @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lecturers      Lecturer[]
  comments       Comment[]

  @@map("projects")
}

enum ProjectType {
  Generals
  WebStatic
  SelfHostedWeb
  NodeJs
}

model Backend {
  id             Int         @id @default(autoincrement())
  isActive       Boolean     @default(false)
  sourceCode     String
  url            String?
  description    String
  type           ProjectType @default(Generals)
  runtimeVersion String?
  studentId      Int         @unique
  student        Student     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("project_backends")
}

model Database {
  id          Int     @id @default(autoincrement())
  isActive    Boolean @default(false)
  type        DBType
  url         String?
  name        String
  username    String
  password    String
  description String
  studentId   Int     @unique
  student     Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("project_databases")
}

enum DBType {
  mysql
  postgresql
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  username  String
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int?
  createdAt DateTime @default(now())

  @@map("comments")
}

model TechList {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "tech_name")
  Project   Project[]

  @@map("utils_tech_list")
}

model ResearchField {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "research_field")
  Project   Project[]

  @@map("utils_research_field")
}

model ResearchMethod {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "research_method")
  Project   Project[]

  @@map("utils_research_method")
}
